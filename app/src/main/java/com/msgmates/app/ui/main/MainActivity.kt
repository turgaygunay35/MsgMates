package com.msgmates.app.ui.main

import android.os.Bundle
import android.view.View
import android.view.animation.AnimationUtils
import androidx.annotation.AnimRes
import androidx.appcompat.app.AppCompatActivity
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.lifecycleScope
import androidx.navigation.NavController
import androidx.navigation.fragment.NavHostFragment
import androidx.navigation.ui.setupWithNavController
import com.msgmates.app.BuildConfig
import com.msgmates.app.R
import com.msgmates.app.core.auth.AccessToken
import com.msgmates.app.core.auth.AuthGuard
import com.msgmates.app.core.auth.AuthTokens
import com.msgmates.app.core.auth.AutoRefreshLifecycle
import com.msgmates.app.core.auth.RefreshToken
import com.msgmates.app.core.auth.SessionEvents
import com.msgmates.app.core.auth.SessionStarter
import com.msgmates.app.core.auth.TokenRepository
import com.msgmates.app.core.datastore.AuthTokenStore
import com.msgmates.app.core.env.EnvConfig
import com.msgmates.app.core.network.EchoApi
import com.msgmates.app.core.ui.UIEnhancements
import com.msgmates.app.databinding.ActivityMainBinding
import com.msgmates.app.ui.chats.ChatsViewModel
import com.msgmates.app.ui.contacts.ContactsViewModel
import com.msgmates.app.ui.journal.JournalViewModel
import com.google.android.material.dialog.MaterialAlertDialogBuilder
import dagger.hilt.android.AndroidEntryPoint
import javax.inject.Inject
import kotlinx.coroutines.launch
import retrofit2.Retrofit

@AndroidEntryPoint
class MainActivity : AppCompatActivity() {
    private lateinit var vb: ActivityMainBinding
    private lateinit var nav: NavController
    private lateinit var chatsViewModel: ChatsViewModel
    private lateinit var contactsViewModel: ContactsViewModel
    private lateinit var journalViewModel: JournalViewModel

    @Inject
    lateinit var tokenRepository: TokenRepository

    @Inject
    lateinit var authTokenStore: AuthTokenStore

    @Inject
    lateinit var sessionStarter: SessionStarter

    @Inject
    lateinit var autoRefreshLifecycle: AutoRefreshLifecycle

    @Inject
    lateinit var envConfig: EnvConfig

    @Inject
    lateinit var retrofit: Retrofit

    @Inject
    lateinit var authGuard: AuthGuard

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // ZORUNLU: Auth kontrolÃ¼ yap - Tek GiriÅŸ NoktasÄ±
        android.util.Log.d("MainActivity", "Checking auth...")
        val isAuthenticated = authGuard.isAuthenticated()
        android.util.Log.d("MainActivity", "Is authenticated: $isAuthenticated")

        if (!isAuthenticated) {
            android.util.Log.d("MainActivity", "Not authenticated, redirecting to auth")
            authGuard.redirectToAuth(this)
            return // Auth'a yÃ¶nlendirildi, bu activity'yi kapat
        }

        android.util.Log.d("MainActivity", "Authenticated, starting main flow")

        // Auth baÅŸarÄ±lÄ±, Main akÄ±ÅŸÄ±nÄ± baÅŸlat
        // MainGraph'taki TÃœM ekranlar bu noktadan sonra gÃ¼venli

        vb = ActivityMainBinding.inflate(layoutInflater)
        setContentView(vb.root)

        // ViewModel'leri baÅŸlat
        chatsViewModel = ViewModelProvider(this)[ChatsViewModel::class.java]
        contactsViewModel = ViewModelProvider(this)[ContactsViewModel::class.java]
        journalViewModel = ViewModelProvider(this)[JournalViewModel::class.java]

        // Ã–NEMLÄ°: activity_main.xml'deki id "nav_host"
        val host = supportFragmentManager.findFragmentById(R.id.nav_host) as NavHostFragment
        nav = host.navController

        // BottomNavigationView setup
        vb.bottomBar.setupWithNavController(nav)

        // Apply UI enhancements
        applyUIEnhancements()

        // Sekme izolasyonu: sadece aktif sekme gÃ¶rÃ¼nÃ¼r
        vb.bottomBar.setOnItemReselectedListener { _ ->
            nav.popBackStack(nav.graph.startDestinationId, false)
        }

        // Sekme deÄŸiÅŸiminde fragment lifecycle'Ä±nÄ± kontrol et
        nav.addOnDestinationChangedListener { _, destination, _ ->
            handleTabChange(destination.id)
        }
        val sel = savedInstanceState?.getInt("bottom_selected") ?: R.id.dest_chats
        vb.bottomBar.selectedItemId = sel

        // AppBar'Ä± sadece chats ekranÄ±nda gÃ¶ster
        setupAppBarVisibility()
        setupFilterChips()
        setupUnreadCount()
        setupSearchButton()
        setupRefreshButton()

        // Auth kontrolÃ¼ ve sessiz yenileme
        checkAuthStatus()

        // Auto refresh lifecycle
        lifecycle.addObserver(autoRefreshLifecycle)

        // Global logout handling
        setupGlobalLogout()

        // Debug test - sadece debug build'de Ã§alÄ±ÅŸÄ±r
        if (BuildConfig.DEBUG) {
            runAuthDebugTest()
        }
    }

    private fun setupAppBarVisibility() {
        nav.addOnDestinationChangedListener { _, destination, _ ->
            when (destination.id) {
                R.id.dest_chats -> {
                    // Sohbetler: Sadece arama ikonu
                    vb.ivLogo.visibility = View.VISIBLE
                    vb.tvTitle.visibility = View.VISIBLE
                    vb.statusCapsuleContainer.visibility = View.VISIBLE
                    vb.appbarContainer.visibility = View.VISIBLE
                    vb.searchContainer.visibility = View.VISIBLE
                    vb.btnQuickAction.visibility = View.GONE
                    vb.etSearch.hint = "Sohbetlerde ara"
                }
                R.id.dest_contacts -> {
                    // Rehber: Arama ikonu + Yenile butonu
                    vb.ivLogo.visibility = View.VISIBLE
                    vb.tvTitle.visibility = View.VISIBLE
                    vb.statusCapsuleContainer.visibility = View.VISIBLE
                    vb.appbarContainer.visibility = View.GONE
                    vb.searchContainer.visibility = View.VISIBLE
                    vb.btnQuickAction.visibility = View.GONE
                    vb.btnRefresh.visibility = View.VISIBLE
                    vb.etSearch.hint = "Rehberde ara"
                }
                R.id.dest_journal -> {
                    // GÃ¼nlÃ¼k: Sadece + ikonu
                    vb.ivLogo.visibility = View.VISIBLE
                    vb.tvTitle.visibility = View.VISIBLE
                    vb.statusCapsuleContainer.visibility = View.VISIBLE
                    vb.appbarContainer.visibility = View.GONE
                    vb.searchContainer.visibility = View.GONE
                    vb.btnQuickAction.visibility = View.VISIBLE
                    vb.btnRefresh.visibility = View.GONE
                }
                R.id.dest_menu -> {
                    // MenÃ¼: HiÃ§bir ikon
                    vb.ivLogo.visibility = View.VISIBLE
                    vb.tvTitle.visibility = View.VISIBLE
                    vb.statusCapsuleContainer.visibility = View.VISIBLE
                    vb.appbarContainer.visibility = View.GONE
                    vb.searchContainer.visibility = View.GONE
                    vb.btnQuickAction.visibility = View.GONE
                    vb.btnRefresh.visibility = View.GONE
                }
                R.id.dest_disaster_mode -> {
                    // Afet Modu: KÄ±rmÄ±zÄ± tema, sadece geri ok
                    vb.ivLogo.visibility = View.VISIBLE
                    vb.tvTitle.visibility = View.VISIBLE
                    vb.tvTitle.text = "ğŸš¨ Afet Modu"
                    vb.statusCapsuleContainer.visibility = View.GONE
                    vb.appbarContainer.visibility = View.VISIBLE
                    vb.searchContainer.visibility = View.GONE
                    vb.btnQuickAction.visibility = View.GONE
                    vb.btnRefresh.visibility = View.GONE
                    // KÄ±rmÄ±zÄ± tema uygula
                    vb.appbarContainer.setBackgroundColor(getColor(R.color.disaster_red))
                    vb.tvTitle.setTextColor(getColor(android.R.color.white))
                }
                else -> {
                    // DiÄŸer ekranlar: Sadece geri ok
                    vb.ivLogo.visibility = View.VISIBLE
                    vb.tvTitle.visibility = View.VISIBLE
                    vb.statusCapsuleContainer.visibility = View.VISIBLE
                    vb.appbarContainer.visibility = View.GONE
                    vb.searchContainer.visibility = View.GONE
                    vb.btnQuickAction.visibility = View.GONE
                    vb.btnRefresh.visibility = View.GONE
                }
            }
        }
    }

    private fun setupFilterChips() {
        // Filter chip'leri ayarla
        val chips = listOf(
            vb.chipFilterAll to "all",
            vb.chipFilterUnread to "unread", vb.chipFilterGroups to "groups",
            vb.chipFilterFavorites to "favorites",
            vb.chipFilterArchived to "archived",
            vb.chipFilterDisaster to "disaster"
        )

        chips.forEach { (chip, filter) ->
            chip.setOnClickListener {
                // GÃ¼venli chip scale animasyonu
                safeStartAnim(chip, R.anim.chip_scale_up)

                // TÃ¼m chip'leri seÃ§ili olmayan duruma getir
                chips.forEach { (c, _) ->
                    c.isChecked = false
                }
                // TÄ±klanan chip'i seÃ§ili yap
                chip.isChecked = true

                // ViewModel'e filter deÄŸiÅŸikliÄŸini bildir
                chatsViewModel.selectFilter(filter)
            }
        }

        // Ä°lk chip'i seÃ§ili yap ve yeÅŸil renk yap
        vb.chipFilterAll.isChecked = true
        vb.chipFilterAll.setChipBackgroundColorResource(R.color.primary_green_light)
        vb.chipFilterAll.setChipStrokeColorResource(R.color.primary_green)
    }

    private fun setupUnreadCount() {
        // OkunmamÄ±ÅŸ mesaj sayÄ±sÄ±nÄ± gÃ¶zlemle
        lifecycleScope.launch {
            chatsViewModel.unreadCount.collect { count ->
                // OkunmamÄ±ÅŸ chip'ine badge ekle
                if (count > 0) {
                    vb.chipFilterUnread.text = "OkunmamÄ±ÅŸ ($count)"
                } else {
                    vb.chipFilterUnread.text = "OkunmamÄ±ÅŸ"
                }
            }
        }
    }

    fun updateAppBarElevation(isScrolled: Boolean) {
        val elevation = if (isScrolled) 8f else 2f
        vb.appbarContainer.elevation = elevation
    }

    private fun setupSearchButton() {
        vb.btnSearch.setOnClickListener {
            // Arama kutusunu gÃ¶ster/gizle
            val isVisible = vb.searchContainer.visibility == View.VISIBLE
            vb.searchContainer.visibility = if (isVisible) View.GONE else View.VISIBLE

            if (!isVisible) {
                // Arama kutusu aÃ§Ä±ldÄ±ÄŸÄ±nda focus ver
                vb.etSearch.requestFocus()
                val imm = getSystemService(android.content.Context.INPUT_METHOD_SERVICE) as android.view.inputmethod.InputMethodManager
                imm.showSoftInput(vb.etSearch, android.view.inputmethod.InputMethodManager.SHOW_IMPLICIT)
            }
        }

        // + Ä°konu iÃ§in click listener
        vb.btnQuickAction.setOnClickListener {
            when (nav.currentDestination?.id) {
                R.id.dest_chats -> {
                    // Sohbet menÃ¼sÃ¼nÃ¼ gÃ¶ster
                    showChatsQuickActionsMenu()
                }
                R.id.dest_journal -> {
                    // GÃ¼nlÃ¼k ekleme fragment'ine git
                    nav.navigate(R.id.dest_journal_add)
                }
            }
        }

        // Arama filtreleme - fragment'e Ã¶zel
        vb.etSearch.addTextChangedListener(object : android.text.TextWatcher {
            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}
            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}
            override fun afterTextChanged(s: android.text.Editable?) {
                val query = s.toString().trim()
                // Mevcut fragment'e gÃ¶re arama yap
                when (nav.currentDestination?.id) {
                    R.id.dest_chats -> {
                        // ChatsViewModel'e arama query'sini gÃ¶nder
                        chatsViewModel.searchConversations(query)
                    }
                    R.id.dest_contacts -> {
                        // ContactsViewModel'e arama query'sini gÃ¶nder
                        contactsViewModel.searchContacts(query)
                    }
                    // Menu fragment'te arama yok
                }
            }
        })

        // HÄ±zlÄ± aksiyon butonu
        vb.btnQuickAction.setOnClickListener {
            showQuickActionsBottomSheet()
        }
    }

    private fun setupRefreshButton() {
        vb.btnRefresh.setOnClickListener {
            // Contacts sekmesindeyken yenile butonuna basÄ±ldÄ±ÄŸÄ±nda
            when (nav.currentDestination?.id) {
                R.id.dest_contacts -> {
                    // ContactsViewModel'e yenileme isteÄŸi gÃ¶nder
                    contactsViewModel.refreshContacts()
                }
            }
        }
    }

    private fun showChatsQuickActionsMenu() {
        val menuItems = arrayOf(
            "Grup OluÅŸtur",
            "Toplu Sil", 
            "Not Ekle"
        )

        MaterialAlertDialogBuilder(this)
            .setTitle("Sohbet Ä°ÅŸlemleri")
            .setItems(menuItems) { _, which ->
                when (which) {
                    0 -> {
                        // Grup OluÅŸtur
                        navigateToCreateGroup()
                    }
                    1 -> {
                        // Toplu Sil - ChatsFragment'e sinyal gÃ¶nder
                        enableMultiSelectMode()
                    }
                    2 -> {
                        // Not Ekle
                        showAddNoteDialog()
                    }
                }
            }
            .show()
    }

    private fun showQuickActionsBottomSheet() {
        val bottomSheet = QuickActionsBottomSheet.newInstance()

        bottomSheet.setOnDailyShareClickListener {
            // GÃ¼nlÃ¼k paylaÅŸ ekranÄ±na git
            navigateToDailyShare()
        }

        bottomSheet.setOnCreateGroupClickListener {
            // Grup kur ekranÄ±na git
            navigateToCreateGroup()
        }

        bottomSheet.show(supportFragmentManager, "QuickActionsBottomSheet")
    }

    private fun navigateToDailyShare() {
        nav.navigate(R.id.dest_daily_share)
    }

    private fun navigateToCreateGroup() {
        nav.navigate(R.id.dest_create_group)
    }

    private fun enableMultiSelectMode() {
        // ChatsFragment'e Ã§oklu seÃ§im modunu aktif etmesi iÃ§in sinyal gÃ¶nder
        // Bu iÅŸlem ChatsFragment'te handle edilecek
        // TODO: ChatsFragment ile iletiÅŸim kurulacak
    }

    private fun showAddNoteDialog() {
        val input = android.widget.EditText(this)
        input.hint = "Notunuzu yazÄ±n..."
        input.setPadding(50, 30, 50, 30)

        MaterialAlertDialogBuilder(this)
            .setTitle("Not Ekle")
            .setView(input)
            .setPositiveButton("Kaydet") { _, _ ->
                val noteText = input.text.toString().trim()
                if (noteText.isNotEmpty()) {
                    // Notu kaydet ve MenÃ¼ â†’ Notlar bÃ¶lÃ¼mÃ¼ne gÃ¶nder
                    saveNote(noteText)
                }
            }
            .setNegativeButton("Ä°ptal", null)
            .show()
    }

    private fun saveNote(noteText: String) {
        // TODO: Notu kaydet ve MenÃ¼ â†’ Notlar bÃ¶lÃ¼mÃ¼ne gÃ¶nder
        // Bu iÅŸlem Notes modÃ¼lÃ¼ ile entegre edilecek
        android.widget.Toast.makeText(this, "Not kaydedildi: $noteText", android.widget.Toast.LENGTH_SHORT).show()
    }

    private fun checkAuthStatus() {
        lifecycleScope.launch {
            val tokens = tokenRepository.getTokens()
            if (tokens.access == null) {
                // Token yok, OTP phone entry ekranÄ±na git
                nav.navigate(R.id.dest_phone_entry)
            } else {
                // Token var, sessiz yenileme dene
                if (!sessionStarter.ensureFreshSession()) {
                    // Sessiz yenileme baÅŸarÄ±sÄ±z, global logout tetiklenecek
                    android.util.Log.w("MainActivity", "Silent refresh failed, will trigger global logout")
                }
            }
        }
    }

    private fun setupGlobalLogout() {
        lifecycleScope.launchWhenStarted {
            SessionEvents.forceLogout.collect {
                // Global logout tetiklendi
                authTokenStore.clearTokens()
                nav.navigate(R.id.dest_phone_entry)
            }
        }
    }

    private fun runAuthDebugTest() {
        lifecycleScope.launch {
            try {
                android.util.Log.d("AuthTest", "=== AUTH DEBUG TEST START ===")

                // Env config test
                android.util.Log.d("AuthTest", "Base URL: ${envConfig.baseUrl}")
                android.util.Log.d("AuthTest", "WS URL: ${envConfig.wsUrl}")
                android.util.Log.d("AuthTest", "Auth loginStart: ${envConfig.auth.loginStart}")

                // Token test
                val now = System.currentTimeMillis() / 1000
                val fakeTokens = AuthTokens(
                    access = AccessToken("fakeAccessToken123", now + 3600),
                    refresh = RefreshToken("fakeRefreshToken456", now + 86400)
                )

                android.util.Log.d("AuthTest", "Saving fake tokens...")
                tokenRepository.setTokens("fakeAccessToken123", "fakeRefreshToken456")

                val retrievedTokens = tokenRepository.getTokens()
                android.util.Log.d("AuthTest", "Retrieved access token: ${retrievedTokens.access}")
                android.util.Log.d("AuthTest", "Retrieved refresh token: ${retrievedTokens.refresh}")

                // Clear test
                android.util.Log.d("AuthTest", "Clearing tokens...")
                tokenRepository.clear()

                val clearedTokens = tokenRepository.getTokens()
                android.util.Log.d(
                    "AuthTest",
                    "After clear - access: ${clearedTokens.access}, refresh: ${clearedTokens.refresh}"
                )

                // Network test
                android.util.Log.d("AuthTest", "Testing network with fake token...")
                tokenRepository.setTokens("fakeAccessToken123", "fakeRefreshToken456")

                val echoApi = retrofit.create(EchoApi::class.java)
                runCatching { echoApi.echo().code() }.onSuccess { code ->
                    android.util.Log.d("AuthTest", "Echo API response code: $code")
                }.onFailure { error ->
                    android.util.Log.e("AuthTest", "Echo API failed", error)
                }

                android.util.Log.d("AuthTest", "=== AUTH DEBUG TEST COMPLETE ===")
            } catch (e: Exception) {
                android.util.Log.e("AuthTest", "Auth debug test failed", e)
            }
        }
    }

    override fun onSaveInstanceState(outState: Bundle) {
        super.onSaveInstanceState(outState)
        outState.putInt("bottom_selected", vb.bottomBar.selectedItemId)
    }

    override fun onBackPressed() {
        // MainActivity'de geri tuÅŸu uygulamadan Ã§Ä±kÄ±ÅŸ yapsÄ±n
        // (Login ekranÄ±na dÃ¶nmesin)
        finishAffinity()
    }

    /**
     * Sekme deÄŸiÅŸiminde fragment lifecycle'Ä±nÄ± kontrol et
     * Sadece aktif sekme gÃ¶rÃ¼nÃ¼r, diÄŸerleri gizli
     */
    private fun handleTabChange(destinationId: Int) {
        when (destinationId) {
            R.id.dest_chats -> {
                // Chats sekmesi aktif
                showAppBar(true)
                hideOtherTabs()
            }
            R.id.dest_contacts -> {
                // Contacts sekmesi aktif
                showAppBar(false)
                hideOtherTabs()
            }
            R.id.dest_journal -> {
                // Journal sekmesi aktif
                showAppBar(false)
                hideOtherTabs()
            }
            R.id.dest_menu -> {
                // Menu sekmesi aktif
                showAppBar(false)
                hideOtherTabs()
            }
        }
    }

    /**
     * AppBar'Ä± gÃ¶ster/gizle
     */
    private fun showAppBar(show: Boolean) {
        // AppBar visibility kontrolÃ¼
        // vb.appBar.visibility = if (show) View.VISIBLE else View.GONE
    }

    /**
     * DiÄŸer sekmeleri gizle (sadece aktif sekme gÃ¶rÃ¼nÃ¼r)
     */
    private fun hideOtherTabs() {
        // Fragment container'da sadece aktif fragment gÃ¶rÃ¼nÃ¼r
        // Navigation Component otomatik olarak bunu yÃ¶netir
    }

    /**
     * GÃ¼venli animasyon baÅŸlatma
     */
    private fun safeStartAnim(view: View, @androidx.annotation.AnimRes resId: Int) {
        runCatching { AnimationUtils.loadAnimation(this, resId) }.onSuccess { view.startAnimation(it) }.onFailure {
            // Fallback: ViewPropertyAnimator
            view.animate()
                .scaleX(1.1f)
                .scaleY(1.1f)
                .setDuration(100)
                .withEndAction {
                    view.animate()
                        .scaleX(1.0f)
                        .scaleY(1.0f)
                        .setDuration(100)
                        .start()
                }
                .start()
        }
    }

    /**
     * Apply UI enhancements for better user experience
     */
    private fun applyUIEnhancements() {
        // Apply touch feedback to bottom navigation items
        for (i in 0 until vb.bottomBar.menu.size()) {
            val item = vb.bottomBar.menu.getItem(i)
            val view = vb.bottomBar.findViewById<View>(item.itemId)
            view?.let { UIEnhancements.applyTouchFeedback(it) }
        }

        // Apply system window insets for edge-to-edge display
        UIEnhancements.applySystemWindowInsets(vb.root)

        // Apply ripple effect to clickable elements
        vb.bottomBar.let { UIEnhancements.applyRippleEffect(it) }
    }
}
